import 'package:cloud_firestore/cloud_firestore.dart';

class CallHistory {
  final String? callID; // Auto-generated by Firestore
  final String userID; // Foreign Key (User)
  final String contactID; // Foreign Key (EmergencyContact)
  final DateTime timeStamp;
  final String callStatus; // Firestore Timestamp

  CallHistory({
    this.callID, // Firestore generates this
    required this.userID,
    required this.contactID,
    required this.timeStamp,
    required this.callStatus,
  });

  Map<String, dynamic> toMap() {
    return {
      "userId": userID,
      "contactId": contactID,
      "timestamp": timeStamp,
      "callstatus":callStatus // Firestore Timestamp directly
    };
  }

  factory CallHistory.fromMap(String id, Map<String, dynamic> map) {
    return CallHistory(
      callID: id,
      userID: map["userId"] ?? "",
      contactID: map["contactId"] ?? "",
      timeStamp: map["timestamp"] ?? Timestamp.now(),
      callStatus: "accepted" // Firestore Timestamp
    );
  }
}


Future<void> logCall(CallHistory call) async {
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  try {
    DocumentReference docRef = await firestore.collection("CallHistory").add(call.toMap());
    print("Emergency call logged with ID: ${docRef.id}");
  } catch (e) {
    print("Error logging call: $e");
  }
}

// Function to Log an Emergency Call (Called when a call is made)
void logEmergencyCall() async {
  CallHistory call = CallHistory(
    userID: "USER_ID_HERE", // Replace with actual user ID
    contactID: "CONTACT_ID_HERE", // Replace with actual contact ID
    timeStamp: DateTime.now(),
    callStatus: "accepted"
  );

  await logCall(call);
  print("Emergency call logged!");
}